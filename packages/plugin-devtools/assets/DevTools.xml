<templates>
    <!-- INSPECTOR -->
    <devtools-panel class="inspector" t-name="InspectorComponent" t-att-class="{active: props.isOpen}"
        t-on-node-selected="selectNode"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <devtools-mainpane>
                <mainpane-contents>
                    <devtools-tree>
                        <TreeComponent
                            vNode="env.editor.vDocument.root"
                            isRoot="true"
                            selectedPath="state.selectedPath"
                            selectedID="state.selectedNode.id"/>
                    </devtools-tree>
                </mainpane-contents>
                <PathComponent
                    path="state.selectedPath"
                    selectedID="state.selectedNode.id"/>
            </devtools-mainpane>
            <devtools-sidepane>
                <InfoComponent vNode="state.selectedNode"/>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <!-- INSPECTOR.Tree -->
    <devtools-node t-name="TreeComponent"
        t-att-class="{
            element: props.vNode.length and !props.vNode.value,
            folded: state.folded,
            root: props.isRoot,
            'self-closing': props.vNode.length == 0,
        }"
        tabindex="1"
        t-on-keydown="onKeydown"
        t-on-node-selected="selectNode">
        <t t-if="props.isRoot">
            <span class="element-name selectable-line"
                t-on-click="onClickNode" t-on-dblclick="onDblClickNode"
                t-att-class="{
                    selected: props.selectedID == props.vNode.id,
                }">root</span>
            <t t-call="treeChildren"/>
        </t>
        <t t-else="">
            <span t-if="props.vNode.type == 'RANGE_TAIL' or props.vNode.type == 'RANGE_HEAD'"
                t-on-click="onClickNode" t-on-dblclick="onDblClickNode"
                class="selectable-line range-node" t-att-class="{
                    selected: props.selectedID == props.vNode.id,
                }">
                <b><t t-esc="repr"/></b>
            </span>
            <span t-elif="props.vNode.value" t-on-click="onClickNode"
                t-on-dblclick="onDblClickNode"
                class="selectable-line" t-att-class="{
                    bold: props.vNode.format.bold,
                    italic: props.vNode.format.italic,
                    underline: props.vNode.format.underline,
                    selected: props.selectedID == props.vNode.id,
                }">
                <t t-esc="repr"/>
            </span>
            <t t-else="">
                <span class="element-name selectable-line" t-on-click="onClickNode"
                    t-on-dblclick="onDblClickNode"
                    t-att-class="{
                        bold: props.vNode.format.bold,
                        italic: props.vNode.format.italic,
                        underline: props.vNode.format.underline,
                        selected: props.selectedID == props.vNode.id,
                        'line-break': props.vNode.type === 'LINE_BREAK',
                    }">
                    <t t-esc="repr"/>
                </span>
                <t t-call="treeChildren"/>
            </t>
        </t>
    </devtools-node>

    <t t-name="treeChildren">
        <div class="children">
            <TreeComponent t-if="!state.folded"
                t-foreach="props.vNode._children" t-as="child"
                t-key="child.id"
                vNode="child"
                selectedPath="props.selectedPath"
                selectedID="props.selectedID"/>
        </div>
    </t>

    <!-- INSPECTOR.Path -->
    <devtools-path t-name="PathComponent">
        <devtools-pathnode t-foreach="props.path" t-as="vNode"
            t-key="vNode.id"
            t-att-class="{
                selected: vNode.id == props.selectedID
            }"
            t-on-click="selectNode(vNode)">
            <t t-esc="getNodeRepr(vNode)"/>
        </devtools-pathnode>
    </devtools-path>

    <!-- INSPECTOR.Info -->
    <devtools-info t-name="InfoComponent">
        <devtools-navbar>
            <button t-on-click="openTab('vNode')" t-att-class="{
                selected: state.currentTab == 'vNode',
            }">VNode</button>
            <button t-on-click="openTab('selection')" t-att-class="{
                selected: state.currentTab == 'selection',
            }">Selection</button>
        </devtools-navbar>
        <t t-call="infoVNode" t-if="state.currentTab == 'vNode'"/>
        <t t-call="infoSelection" t-if="state.currentTab == 'selection'"/>
    </devtools-info>

    <!-- INSPECTOR.Info.vNode -->
    <t t-name="infoVNode">
        <div class="about">
            <span class="type">VNode</span> <t t-esc="props.vNode.type or &quot;?&quot;"/>
            <t t-if="props.vNode.value">:
                "<t t-esc="props.vNode.value"/>"
            </t>
            <span class="id"><t t-esc="props.vNode.id"/></span>
        </div>
        <div class="properties">
            <div class="divider">ðŸ‘¤ About me</div>
            <table>
                <tbody>
                    <tr>
                        <td>id</td>
                        <td><t t-esc="props.vNode.id"/></td>
                    </tr>
                    <tr>
                        <td>type</td>
                        <td><t t-esc="props.vNode.type or &quot;UNKNOWN&quot;"/></td>
                    </tr>
                    <tr t-if="props.vNode.value">
                        <td>value</td>
                        <td>"<t t-esc="props.vNode.value"/>"</td>
                    </tr>
                    <tr>
                        <td>length</td>
                        <td><t t-esc="props.vNode.length"/></td>
                    </tr>
                    <tr>
                        <td>total length</td>
                        <td><t t-esc="props.vNode.totalLength()"/></td>
                    </tr>
                    <tr t-if="props.vNode.hasProperties()">
                        <td>properties</td>
                        <td>
                            <ol style="list-style-type: none">
                                <li t-if="props.vNode.properties.atomic">Atomic</li>
                            </ol>
                        </td>
                    </tr>
                    <tr t-if="props.vNode.hasFormat()">
                        <td>format</td>
                        <td>
                            <ol style="list-style-type: none">
                                <li t-if="props.vNode.format.bold">Bold</li>
                                <li t-if="props.vNode.format.italic">Italic</li>
                                <li t-if="props.vNode.format.underline">Underline</li>
                            </ol>
                        </td>
                    </tr>
                    <tr>
                        <td>original tag</td>
                        <td><t t-esc="props.vNode.originalTag or &quot;None&quot;"/></td>
                    </tr>
                    <tr t-if="props.vNode.text().length">
                        <td>text</td>
                        <td>"<t t-esc="props.vNode.text()"/>"</td>
                    </tr>
                </tbody>
            </table>
            <div class="divider">ðŸ‘ª My Family</div>
            <table>
                <tbody>
                    <tr>
                        <td>index</td>
                        <td><t t-esc="props.vNode.index"/></td>
                    </tr>
                    <tr t-if="props.vNode.parent">
                        <td>parent</td>
                        <td t-on-click="selectNode(props.vNode.parent)">
                            <t t-esc="props.vNode.parent.type or &quot;?&quot;"/>
                        </td>
                    </tr>
                    <tr t-if="props.vNode.siblings.length > 1">
                        <td>siblings</td>
                        <td>
                            <ol style="list-style-type: none">
                                <li t-if="props.vNode.previousSibling()"
                                    t-on-click="selectNode(props.vNode.previousSibling())">
                                    previous: <t t-esc="props.vNode.previousSibling().type or &quot;?&quot;"/>
                                </li>
                                <li t-if="props.vNode.nextSibling()"
                                    t-on-click="selectNode(props.vNode.nextSibling())">
                                    next: <t t-esc="props.vNode.nextSibling().type or &quot;?&quot;"/>
                                </li>
                            </ol>
                        </td>
                    </tr>
                    <tr t-if="props.vNode.children.length">
                        <td>children</td>
                        <td>
                            <ol>
                                <li t-foreach="props.vNode.children"
                                    t-as="child" t-key="child.id"
                                    t-on-click="selectNode(child)">
                                    <t t-esc="child.type or &quot;?&quot;"/>
                                </li>
                            </ol>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </t>

    <!-- INSPECTOR.Info.selection -->
    <t t-name="infoSelection">
        <div class="about">
            <span class="type">VRange</span> Selection
        </div>
        <div class="properties">
            <div class="divider">ðŸ‘¤ About me</div>
            <table>
                <tbody>
                    <tr>
                        <td>direction</td>
                        <td><t t-esc="state.range.direction"/></td>
                    </tr>
                    <tr>
                        <td><strong class="range-node"><t
                        t-if="state.range.start === state.range.anchor">[</t><t
                        t-else="">]</t></strong> start</td>
                        <td><t t-esc="_repr(state.range.start)"/></td>
                    </tr>
                    <tr>
                        <td><strong class="range-node"><t
                        t-if="state.range.end === state.range.focus">]</t><t
                        t-else="">[</t></strong> end</td>
                        <td><t t-esc="_repr(state.range.end)"/></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </t>

    <devtools-panel t-name="CommandsComponent"
        t-att-class="{active: props.isOpen}" tabindex="1"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <t t-set="handlers" t-value="state.handlers[state.selectedCommandIdentifier]"/>
            <devtools-mainpane style="overflow: hidden">
                <devtools-navbar>
                    <button t-on-click="openTab('queue')" t-att-class="{
                        selected: state.currentTab == 'queue',
                    }">Queue</button>
                    <button t-on-click="openTab('registry')" t-att-class="{
                        selected: state.currentTab == 'registry',
                    }">Registry</button>
                </devtools-navbar>
                <mainpane-contents t-if="state.currentTab == 'queue'" style="overflow: auto">
                    <table style="width: 100%;">
                        <tbody>
                            <tr t-foreach="Array.from(props.commands.keys()).reverse()" t-as="commandIndex"
                                t-key="commandIndex_index" class="selectable-line"
                                t-att-class="{
                                    selected: state.selectedCommandIndex == commandIndex,
                                }"
                                t-on-click="selectCommandByIndex(commandIndex)">
                                <td><t t-esc="props.commands[commandIndex][0]"/></td>
                            </tr>
                        </tbody>
                    </table>
                </mainpane-contents>
                <mainpane-contents t-elif="state.currentTab == 'registry'" style="overflow: auto">
                    <div t-foreach="Object.keys(state.registry)" t-as="commandIdentifier"
                        t-key="record_index" class="selectable-line"
                        t-att-class="{
                            selected: state.selectedCommandIdentifier == commandIdentifier,
                        }"
                        t-on-click="selectCommand(commandIdentifier)">
                        <t t-esc="commandIdentifier"/>
                    </div>
                </mainpane-contents>
            </devtools-mainpane>
            <devtools-sidepane>
                <devtools-info t-if="state.currentTab == 'queue'">
                    <t t-set="selectedCommand" t-value="props.commands[state.selectedCommandIndex]"/>
                    <div class="about" t-if="selectedCommand">
                        <span class="type">Command</span> <t t-esc="selectedCommand[0]"/>
                    </div>
                    <div class="properties" t-if="selectedCommand">
                        <div class="divider">Arguments</div>
                        <div class="properties">
                            <t t-if="selectedCommand">
                                <t t-set="payload" t-value="selectedCommand[1]"/>
                                <t t-call="commandArgs"/>
                            </t>
                            <t t-call="commandHandlers"/>
                        </div>
                    </div>
                </devtools-info>
                <devtools-info t-elif="state.currentTab == 'registry'">
                    <t t-if="state.registry">
                        <div class="about" t-if="state.selectedCommandIdentifier">
                            <span class="type">Command</span> <t t-esc="state.selectedCommandIdentifier"/>
                        </div>
                        <div class="properties" t-if="state.selectedCommandIdentifier">
                            <t t-call="commandHandlers"/>
                        </div>
                    </t>
                </devtools-info>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <t t-name="commandArgs">
        <table>
            <tbody>
                <tr t-foreach="Object.keys(payload)" t-as="key" t-key="key_index">
                    <t t-set="value" t-value="payload[key]"/>
                    <td>
                        <t t-esc="key"/>
                    </td>
                    <td>
                        <t t-if="value and key == 'vRange'" t-call="payloadVRange"/>
                        <t t-else=""><t t-esc="formatPayloadValue(value)"/></t>
                    </td>
                </tr>
            </tbody>
        </table>
    </t>

    <t t-name="payloadVRange">
        <table>
            <tbody>
                <tr>
                    <td>
                        direction
                    </td>
                    <td>
                        <t t-esc="value.direction or 'unset'"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        start
                    </td>
                    <td>
                        <t t-esc="value.startPosition"/> <t t-esc="value.start.id"/> (<t t-esc="value.start.value or value.start.type"/>)
                    </td>
                </tr>
                <tr>
                    <td>
                        end
                    </td>
                    <td>
                        <t t-esc="value.endPosition"/> <t t-esc="value.end.id"/> (<t t-esc="value.end.value or value.end.type"/>)
                    </td>
                </tr>
            </tbody>
        </table>
    </t>

    <t t-name="commandHandlers">
        <div class="divider" t-if="handlers">Handlers</div>
        <table t-if="handlers">
            <tbody>
                <tr t-foreach="handlers"
                    t-as="handler" t-key="handler_index"
                    class="selectable-line"
                    t-att-class="{
                        selected: state.selectedHandlerIndex == handlerIndex,
                    }">
                    <td><t t-esc="handler.name"/></td>
                    <td><t t-esc="handler"/></td>
                </tr>
            </tbody>
        </table>
    </t>

    <!-- MEMORY SVG COMPONENT -->
    <g t-name="MemoryIntermediateLayout" t-attf-transform="translate(0, {{props.intermediate.offsetY * props.heigth}})" class="MemoryIntermediateLayout">
        <g t-if="props.intermediate.nexts.length" t-attf-transform="translate({{props.width}}, 0)">
            <MemoryIntermediateLayout
                t-foreach="props.intermediate.nexts" t-as="next"
                activeSlice="props.activeSlice"
                selectedSlice="props.selectedSlice"
                intermediate="next"
                width="props.width"
                heigth="props.heigth"/>
            <line x1="0" t-att-y1="props.heigth" x2="0" t-att-y2="props.intermediate.height * props.heigth" stroke="black"/>
        </g>
        <g>
            <text t-on-click="selectAction" x="6" y="28" fill="red" stroke="none"
                style="font-size: 10px;font-family: arial; cursor: pointer;"><t t-esc="props.intermediate.origin.actionID"/></text>
            <line x1="0" t-att-y1="props.heigth" t-att-x2="props.width" t-att-y2="props.heigth" stroke="black"/>
            <circle
                t-on-click="selectMemory"
                t-att-cx="props.width" t-att-cy="props.heigth" r="5"
                stroke-width="1"
                t-att-fill="props.activeSlice === props.intermediate.key ? 'green' : (props.selectedSlice === props.intermediate.key ? 'yellow' : '#dddddd')"
                style="cursor: pointer;"/>
        </g>
    </g>

    <g t-name="MemoryIntermediateFluxLayout" class="MemoryIntermediateFluxLayout" transform="translate(12, 0)">
        <!-- <rect t-att-width="props.flux.width * props.width - 24" t-att-height="props.flux.height * props.heigth" fill="transparent" stroke="#dddddd" stroke-width="1"/> -->
        <line t-foreach="props.flux.origins" t-as="origin"
            t-att-x1="origin.offsetX * props.width" t-att-y1="origin.offsetY * props.heigth"
            t-att-x2="flux.width * props.width - 24" t-att-y2="origin.offsetY * props.heigth" stroke="green"/>
        <line t-if="props.flux.origins.length"
            t-att-x1="flux.width * props.width - 24" t-att-y1="flux.origins[flux.origins.length - 1].offsetY * props.heigth"
            t-att-x2="flux.width * props.width - 24" y2="0" stroke="green"/>
        <MemoryIntermediateLayout
            t-foreach="flux.intermediates" t-as="intermediate"
            activeSlice="props.activeSlice"
            selectedSlice="props.selectedSlice"
            intermediate="intermediate"
            width="props.width"
            heigth="props.heigth"/>
        <line x1="0" y1="0" x2="0" t-att-y2="props.flux.height * props.heigth" stroke="black"/>
    </g>

    <g t-name="MemoryMasterLayout" class="MemoryMasterLayout" t-attf-transform="translate(0, {{props.master.offsetY * props.heigth}})">
        <MemoryIntermediateFluxLayout
            activeSlice="props.activeSlice"
            selectedSlice="props.selectedSlice"
            flux="props.master.flux"
            width="props.width"
            heigth="props.heigth"/>
        <g t-if="!props.master.finished &amp;&amp; props.master.nexts.length" t-attf-transform="translate({{props.master.flux.width * props.width}},0)">
            <MemoryMasterLayout
                t-foreach="props.master.nexts" t-as="next"
                activeSlice="props.activeSlice"
                selectedSlice="props.selectedSlice"
                master="next"
                width="props.width"
                heigth="props.heigth"/>
            <line t-if="props.master.nexts.length > 1" x1="0" y1="0" x2="0" t-att-y2="props.master.nexts[props.master.nexts.length - 1].offsetY * props.heigth" stroke="black" stroke-width="2"/>
        </g>
        <line t-if="!props.master.finished &amp;&amp; !props.master.nexts.length"
             t-attf-x1="{{props.master.flux.width * props.width}}" y1="0" y2="0" t-attf-x2="{{(props.master.flux.width + 1) * props.width}}" stroke="black" stroke-width="2"/>
        <g>
            <text t-if="!props.firstItem"
                t-on-click="selectAction" x="16" y="-2" fill="red" stroke="none"
                style="font-size: 10px;font-family: arial; cursor: pointer;"><t t-esc="props.master.origin.actionID"/></text>
            <line x1="0" y1="0" y2="0" t-attf-x2="{{props.master.flux.width * props.width}}" stroke="black" stroke-width="2"/>
            <circle
                t-on-click="selectMemory"
                t-on-dblclick="switchMemory"
                t-att-cx="props.master.flux.width * props.width" cy="0" r="8"
                stroke-width="1"
                t-att-fill="props.activeSlice === props.master.key ? 'green' : (props.selectedSlice === props.master.key ? 'yellow' : '#dddddd')"
                style="cursor: pointer;"/>
        </g>
    </g>

    <svg t-name="MemoryFluxLayout" t-att-width="props.flux.width * 60 + 40" t-att-height="(props.flux.height + 1) * 30 + 20">
        <g t-attf-transform="translate(0, 20)">
            <MemoryMasterLayout
                activeSlice="props.activeSlice"
                selectedSlice="props.selectedSlice"
                master="props.flux.first"
                firstItem="true"
                width="55"
                heigth="30"/>
        </g>
    </svg>

    <!-- MEMORY -->
    <devtools-panel t-name="MemoryComponent"
        t-on-memory-selected="onSelectMemory"
        t-on-memory-switch="onSwitchMemory"
        class="active" tabindex="2">
        <devtools-contents>
            <devtools-mainpane>
                <MemoryFluxLayout t-if="state.flux" flux="state.flux" activeSlice="state.activeSlice" selectedSlice="state.selectedSlice"/>
                <MemoryFluxLayout t-if="state.flux2" flux="state.flux2" activeSlice="state.activeSlice" selectedSlice="state.selectedSlice"/>
            </devtools-mainpane>
            <devtools-sidepane>
                <div class="about">
                    <span class="type">Memory Slice</span> <t t-esc="state.selectedSlice.split('-').pop()"/>
                </div>
                <div class="properties">
                    <div class="divider">ðŸ‘¤ Parent</div>
                    <span style="cursor: pointer;" 
                        t-if="memory._slicesReference[state.selectedSlice].parent"
                        t-on-click="selectMemory(memory._slicesReference[state.selectedSlice].parent.name)">
                        <t t-esc="memory._slicesReference[state.selectedSlice].parent.name"/>
                    </span>
                    <div class="divider">ðŸ‘ª Children</div>
                    <table>
                        <tbody>
                            <tr t-foreach="memory._slicesReference[state.selectedSlice].children" t-as="ref">
                                <td style="cursor: pointer;" t-on-click="selectMemory(ref.name)"><t t-esc="ref.name.split('-').pop()"/></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <!-- MAIN -->
    <jw-devtools t-name="devtools"
        t-att-class="{
            closed: state.closed,
        }"
        t-attf-style="height: {{state.height}}px"
        tabindex="2">
        <devtools-navbar
            t-on-click="toggleClosed"
            t-on-mousedown="startResize">
            <button t-on-click="openTab('inspector')" t-att-class="{
                selected: state.currentTab == 'inspector',
            }">Inspector</button>
            <button t-on-click="openTab('commands')" t-att-class="{
                selected: state.currentTab == 'commands',
            }">Commands</button>
            <button t-on-click="openTab('memory')" t-att-class="{
                selected: state.currentTab == 'memory',
            }">Memory</button>
        </devtools-navbar>
        <t t-if="!state.closed">
            <InspectorComponent isOpen="state.currentTab == 'inspector'"/>
            <CommandsComponent isOpen="state.currentTab == 'commands'"
                commands="state.commands"/>
            <MemoryComponent t-if="state.currentTab == 'memory'"
                actions="state.actions"/>
        </t>
    </jw-devtools>

</templates>
